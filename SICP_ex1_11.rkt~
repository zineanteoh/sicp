#lang racket

; Ex 1.11

; recursion process
(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1))
         (* 2
            (f (- n 2)))
         (* 3
            (f (- n 3))))))


; iterative process
(define (f n)
  (f-iter 2 1 0 n))

(define (f-iter a b c n)
  (if (= n 0)
      c
      (f-iter (+ (* 3 c)
                 (* 2 b)
                 a)
              a
              b
              (- n 1))))