#lang sicp

; Supporting procedures
(define (make-interval a b) (cons a b))
(define (lower-bound x) (min (car x) (cdr x)))
(define (upper-bound x) (max (car x) (cdr x)))
(define (width interval)
  (/ (- (upper-bound interval) (lower-bound interval)) 2))
(define (sub-interval x y)
  (let ((a1 (- (lower-bound x) (lower-bound y)))
        (a2 (- (lower-bound y) (lower-bound x)))
        (b1 (- (lower-bound x) (upper-bound y)))
        (b2 (- (upper-bound y) (lower-bound x)))
        (c1 (- (upper-bound x) (lower-bound y)))
        (c2 (- (lower-bound y) (upper-bound x)))
        (d1 (- (upper-bound x) (upper-bound y)))
        (d2 (- (upper-bound y) (upper-bound x))))
    (make-interval (min a1 a2 b1 b2 c1 c2 d1 d2)
                   (max a1 a2 b1 b2 c1 c2 d1 d2))))

; Ex 2.11
; No offense, but Ben is dumb / not being helpful

(define (mul-interval x y)
  (define (positive? x)
    (>= (lower-bound x) 0))
  (define (negative? x)
    (< (upper-bound x) 0))
  (define (mixed? x)
    (not (or (positive? x) (negative? x))))
  (let ((xl (lower-bound x))
        (xu (upper-bound x))
        (yl (lower-bound y))
        (yu (upper-bound y)))
    (cond ((and (positive? x) (positive? y))
           (make-interval (* xl yl) (* xu yu)))
          ((and (mixed? x) (positive? y))
           (make-interval (* xl yu) (* xu yu)))
          ((and (positive? x) (mixed? y))
           (make-interval (* xu yl) (* xu yu)))
          ((and (negative? x) (positive? y))
           (make-interval (* xl yu) (* xu yl)))
          ((and (positive? x) (negative? y))
           (make-interval (* xl yu) (* xu yl)))
          ((and (negative? x) (mixed? y))
           (make-interval (* xl yu) (* xu yl)))
          ((and (mixed? x) (negative? y))
           (make-interval (* xu yl) (* xl yl)))
          ((and (negative? x) (negative? y))
           (make-interval (* xu yu) (* xl yl)))
          (else (let ((p1 (* xl yl))
                      (p2 (* xl yu))
                      (p3 (* xu yl))
                      (p4 (* xu yu)))
                  (make-interval (min p1 p2 p3 p4)
                                 (max p1 p2 p3 p4)))))))

; Unwanted procedures
(define (old-mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
